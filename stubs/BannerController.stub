<?php

namespace App\Admin\Controllers;

use App\Entity\ApiJsonResponse;
use App\Exceptions\ValueInvalidException;
use App\Models\Activity\ActivityRule;
use App\Models\Common\IndexSlide;
use App\Models\Common\SlideRule;
use App\Models\Common\Store;
use Arr;
use Carbon\Carbon;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Facades\Admin;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class BannerController extends AdminController
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = '轮播图配置';

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    public function index(Content $content)
    {
        $indexSlide = IndexSlide::all()->toJson();

        $slide = SlideRule::where('code', 'INDEX')->first();
        if (!$slide) {
            $slide = new SlideRule();
            $slide->type = 1;
            $slide->time = 1000;
        }
        $css = file_get_contents('./vendor/admin_banner/css/element.css');
        Admin::style($css);
        $css = file_get_contents('./vendor/admin_banner/css/swiperConfig.css');
        Admin::style($css);

        return $content
            ->title($this->title())
            ->description($this->description['index'] ?? trans('admin.list'))
            ->view('admin.banner_index', ['indexSlide' => $indexSlide, 'slide' => $slide]);
    }

    public function postImg(Request $request)
    {

        $img = $request->file('img');

        $fileName = uniqid('', false);
        $filePath = 'AdminBanner/' . Carbon::now()->year . '/' . Carbon::now()->month;

        $fileName       .= '.' . $img->extension();
        $url            = \Storage::disk('s3')->putFileAs($filePath, $img, $fileName);
        $url            = \Storage::disk('s3')->url($url);
        $data['imgUrl'] = $url;
        return [
            'code' => 200,
            'data' => $data
        ];

    }

    public function postSave(Request $request, ApiJsonResponse $apiJsonResponse)
    {
        $data = $request->all();
        $this->checkData($data);
        $carouselType = $request->get('carouselType');
        $interval     = $request->get('interval');
        try {
            DB::beginTransaction();

            $slide = SlideRule::where('code', 'INDEX')->first();
            if (!$slide) {
                $slide = new SlideRule();
            }
            $slide->code = 'INDEX';
            $slide->type = $carouselType;
            $slide->time = $interval;
            $slide->save();
            foreach ($data['data'] as $key => $value) {

                $indexSlide = IndexSlide::whereId(Arr::get($value, 'id'))->first();
                if (!$indexSlide) {
                    $indexSlide = new IndexSlide();
                    if (Arr::get($value, 'is_delete', 0) == 1) {
                        continue;
                    }
                } else {
                    if (Arr::get($value, 'is_delete', 0) == 1) {
                        $indexSlide->delete();
                        continue;
                    }
                }
                $indexSlide->name               = Arr::get($value, 'name');
                $indexSlide->image_cover        = Arr::get($value, 'image_cover');
                $indexSlide->slide_type         = Arr::get($value, 'slide_type');
                $indexSlide->slide_type_content = Arr::get($value, 'slide_type_content');
                $indexSlide->url                = Arr::get($value, 'url');
                $indexSlide->url_type           = Arr::get($value, 'url_type');
                $indexSlide->status             = Arr::get($value, 'status');
                $indexSlide->sort               = $key;;
                $indexSlide->save();

            }

            DB::commit();
        } catch (\Exception $exception) {
            DB::rollBack();
            \Log::error($exception);
            throw new ValueInvalidException('创建失败');
        }
        $apiJsonResponse->message = '操作成功';
        return response()->json($apiJsonResponse->makeResponse());

    }

    public function checkData($postData)
    {
        $validator = Validator::make($postData, [
            //'data.*.id'         => 'required',
            'data.*.slide_type' => 'required',
            'data.*.url_type'   => 'required',
            'data.*.status'     => 'required',
            'carouselType'      => 'required',
            'interval'          => 'required',

        ]);

        if ($validator->fails()) {
            throw new ValueInvalidException('必填参数不能为空');

        }
    }


    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(Store::findOrFail($id));

        $show->field('id', __('Id'));
        $show->field('name', __('Name'));
        $show->field('store_address', __('Store address'));
        $show->field('lat', __('Lat'));
        $show->field('lnt', __('Lnt'));
        $show->field('telephone', __('Telephone'));
        $show->field('status', __('Status'));
        $show->field('counter_code', __('Counter code'));
        $show->field('created_at', __('Created at'));
        $show->field('updated_at', __('Updated at'));
        $show->field('deleted_at', __('Deleted at'));
        $show->field('province', __('Province'));
        $show->field('img', __('Img'));

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Store());

        $form->text('name', __('Name'));
        $form->text('store_address', __('Store address'));
        $form->text('lat', __('Lat'));
        $form->text('lnt', __('Lnt'));
        $form->text('telephone', __('Telephone'));

        $states = [
            'on'  => ['value' => ActivityRule::STATUS_OPEN, 'text' => '开启', 'color' => 'primary'],
            'off' => ['value' => ActivityRule::STATUS_CLOSE, 'text' => '关闭', 'color' => 'default'],
        ];

        $form->switch('status', __('Status'))->states($states);
        $form->text('counter_code', __('Counter code'));
        $form->text('province', __('Province'));
        $form->image('img', __('Img'));
        $form->hidden('store_type', 1);
        return $form;
    }
}
